"""
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. 
The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, 
their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their 
sum and difference are pentagonal and D = |Pk − Pj| is minimised; 
what is the value of D?
"""
from math import sqrt

def P(n):
    """
    Compute Pn
    """
    return n * (3 * n - 1) // 2

def P_inverse(p_number):
    """
    Return n as Pn = p_number
    """
    return (1 + sqrt(24 * p_number + 1)) / 6

def is_pentagonal(number):
    """
    Return true if number is a pentagonal number
    """
    return P_inverse(number).is_integer()

def find_minal_peer(max=10000):
    """
    Find the pair of pentagonal numbers, Pj and Pk, for which their 
    sum and difference are pentagonal and D = |Pk − Pj| is minimised
    """
    for j in range(1, max):
        for k in range(j + 1, max):
            # Compute Pj and Pk
            Pj, Pk = P(j), P(k)

            if is_pentagonal(Pk - Pj) and is_pentagonal(Pk + Pj):
                return Pk - Pj

if __name__ == '__main__':
    res = find_minal_peer()
    print(res)