"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle 	  	T_n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Pentagonal 	  	P_n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	H_n=n(2n−1) 	  	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""
def triangle(n):
    """
    Compute T_n
    """
    return n * (n + 1) // 2

def pentagonal(n):
    """
    Compute P_n
    """
    return n * (3 * n - 1) // 2

def hexagonal(n):
    """
    Compute H_n
    """
    return n * (2 * n - 1)

def is_tri_pent_hexa(n_t, n_p, n_h):
    """
    Return true if T(n_t) = P(n_p) = H_(n_h)
    """
    return triangle(n_t) == pentagonal(n_p) and triangle(n_t) == hexagonal(n_h)

def find_next(n_t, n_p, n_h):
    """
    Find the next triangle number T_n (n > n_t)
    that is also pentagonal and hexagonal
    """
    assert(is_tri_pent_hexa(n_t, n_p, n_h))
    n_t += 1

    while (not is_tri_pent_hexa(n_t, n_p, n_h)):
        t_n = triangle(n_t)
        p_n = pentagonal(n_p)
        h_n = hexagonal(n_h)

        if t_n < p_n or t_n < h_n:
            n_t += 1

        if p_n < t_n or p_n < h_n:
            n_p += 1

        if h_n < t_n or h_n < p_n:
            n_h += 1

    return triangle(n_t)

if __name__ == '__main__':
    res = find_next(285, 165, 143)
    print(res)