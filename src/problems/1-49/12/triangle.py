"""
The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 +
7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five
hundred divisors?
"""
import os, sys
sys.path.append(os.path.join(os.path.dirname(__file__), "../../../lib"))

from prime_numbers import Prime_numbers
from functools import reduce

primes = Prime_numbers()

def nb_divisors(nb):
    """
    Compute the number of divisors of nb
    """
    nb_exp  = []
    cpt_exp = 0

    for prime in primes.it_primes():
        while nb % prime == 0:
            nb      //= prime
            cpt_exp += 1

        if cpt_exp != 0:
            nb_exp.append(cpt_exp + 1)
            cpt_exp = 0

        if nb == 1:
            break

    return reduce(lambda n, y: n * y, nb_exp, 1)

def find_first_triangle_nb_divisors(nb):
    """
    Compute the value of the first triangle number to have over nb divisors
    """
    n = 1
    triangle_number = 1

    while (nb_divisors(triangle_number) < nb):
        n               += 1
        triangle_number += n

    return triangle_number

if __name__ == '__main__':
    res = find_first_triangle_nb_divisors(500)
    print(res)